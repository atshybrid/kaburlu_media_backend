model OtpLog {
  id           String   @id @default(cuid())
  mobileNumber String
  otp          String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
}
model ShortNews {
  id           String   @id @default(cuid())
  title        String
  slug         String?
  summary      String?
  content      String // â‰¤60 words
  language     String?
  author       User     @relation(fields: [authorId], references: [id])
  authorId     String
  categoryId   String
  tags         String[]
  featuredImage String?
  publishDate  DateTime?
  status       String   @default("PENDING") // PENDING, AI_APPROVED, DESK_PENDING, DESK_APPROVED, REJECTED
  seo          Json?
  // Optional extra headings styling payload, e.g. { h2: { text, color?, size? }, h3: { text, color?, size? } }
  headings     Json?
  // Optional template id for client-side rendering style
  templateId   String?
  allowComments Boolean @default(true)
  mediaUrls    String[] // array of image/video URLs
  latitude     Float?
  longitude    Float?
  address      String?
  accuracyMeters Float?
  provider       String?
  timestampUtc   DateTime?
  placeId        String?
  placeName      String?
  source         String?
  aiRemark     String?
  aiPlagiarism Json?
  aiSensitive  Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  reads        ShortNewsRead[]
  comments     Comment[]
  options      ShortNewsOption[]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

model User {
  id           String        @id @default(cuid())
  mobileNumber String?       @unique
  mpin         String?
  firebaseUid  String?
  email        String?       @unique
  role         Role          @relation(fields: [roleId], references: [id])
  roleId       String
  language     Language      @relation(fields: [languageId], references: [id])
  languageId   String
  status       String        @default("PENDING") // PENDING, ACTIVE, INACTIVE, SUSPENDED
  upgradedAt   DateTime?     // Set when guest is upgraded
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  devices      Device[]
  articles     Article[]
  likes        Like[]
  comments     Comment[]
  location     UserLocation?
  profile      UserProfile?
  articleViews ArticleView[]
  shortNews    ShortNews[]
  shortNewsReads ShortNewsRead[]
  dislikes Dislike[]
  articleReads ArticleRead[]
  media        Media[]
  contentReads ContentRead[]
  contentReactions ContentReaction[]
  shortNewsOptions ShortNewsOption[]
}

/// Stores editable AI prompts by key. Allows changing prompts without code changes.
model Prompt {
  id          String   @id @default(cuid())
  key         String   @unique // e.g., SEO_GENERATION, MODERATION, CATEGORY_TRANSLATION
  content     String   // the prompt template content; supports {{placeholders}}
  description String?  // optional human-friendly description
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  permissions Json
  users       User[]
  devices     Device[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Language {
  id         String   @id @default(cuid())
  name       String   @unique
  code       String   @unique
  nativeName String
  direction  String   @default("ltr")
  isDeleted  Boolean  @default(false)
  users      User[]
  articles   Article[]
  devices    Device[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Device {
  id          String   @id @default(cuid())
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      String?
  deviceId    String   @unique
  deviceModel String
  pushToken   String?
  latitude    Float?
  longitude   Float?
  accuracyMeters Float?
  placeId     String?
  placeName   String?
  address     String?
  source      String?
  // When a device operates as a guest (no User row) we store role & language here.
  role        Role?    @relation(fields: [roleId], references: [id])
  roleId      String?
  language    Language? @relation(fields: [languageId], references: [id])
  languageId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserLocation {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique
  latitude  Float
  longitude Float
  accuracyMeters Float?
  provider       String?
  timestampUtc   DateTime?
  placeId        String?
  placeName      String?
  address        String?
  source         String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id        String   @id @default(cuid())
  name      String   @unique
  code      String?  @unique
  states    State[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model State {
  id        String     @id @default(cuid())
  name      String     @unique
  country   Country    @relation(fields: [countryId], references: [id])
  countryId String
  isDeleted Boolean    @default(false)
  districts District[]
  userProfiles UserProfile[] @relation("UserProfile_state")
  contentReads ContentRead[] @relation("ContentRead_state")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model District {
  id        String   @id @default(cuid())
  name      String
  state     State    @relation(fields: [stateId], references: [id])
  stateId   String
  isDeleted Boolean  @default(false)
  mandals   Mandal[]
  userProfiles UserProfile[] @relation("UserProfile_district")
  contentReads ContentRead[] @relation("ContentRead_district")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mandal {
  id         String   @id @default(cuid())
  name       String
  district   District @relation(fields: [districtId], references: [id])
  districtId String
  isDeleted  Boolean  @default(false)
  userProfiles UserProfile[] @relation("UserProfile_mandal")
  contentReads ContentRead[] @relation("ContentRead_mandal")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Category {
  id           String                @id @default(cuid())
  name         String
  slug         String                @unique
  iconUrl      String?
  isDeleted    Boolean               @default(false)
  parent       Category?             @relation("SubCategories", fields: [parentId], references: [id])
  parentId     String?
  children     Category[]            @relation("SubCategories")
  translations CategoryTranslation[]
  articles     Article[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model CategoryTranslation {
  id         String   @id @default(cuid())
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
  language   String
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([categoryId, language])
}

model Article {
  id                String        @id @default(cuid())
  title             String
  content           String
  shortNews         String?
  longNews          String?
  headlines         String?
  type              String // "citizen" or "reporter"
  author            User          @relation(fields: [authorId], references: [id])
  authorId          String
  // Article language (from author's language at creation time)
  language          Language?     @relation(fields: [languageId], references: [id])
  languageId        String?
  status            String        @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  categories        Category[]
  tags              String[]
  images            String[]
  scheduledAt       DateTime?
  isBreakingNews    Boolean       @default(false)
  isTrending        Boolean       @default(false)
  viewCount         Int           @default(0)
  likes             Like[]
  comments          Comment[]
  dislikes          Dislike[]
  relatedArticles   Article[]     @relation("RelatedArticles")
  relatedArticlesTo Article[]     @relation("RelatedArticles")
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  articleViews      ArticleView[]
  contentJson       Json?
  articleReads      ArticleRead[]
}

model ArticleView {
  id        String   @id @default(cuid())
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  deviceId  String?
  viewedAt  DateTime @default(now())
}

model ArticleRead {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  readAt    DateTime @default(now())
  totalTimeMs      Int      @default(0)
  maxScrollPercent Float    @default(0)
  completed        Boolean  @default(false)
  lastEventAt      DateTime?
  completedAt      DateTime?
  sessionsCount    Int      @default(0)

  @@unique([userId, articleId])
}

model Like {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model Dislike {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  article   Article  @relation(fields: [articleId], references: [id])
  articleId String
  createdAt DateTime @default(now())

  @@unique([userId, articleId])
}

model ShortNewsRead {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  shortNews   ShortNews @relation(fields: [shortNewsId], references: [id])
  shortNewsId String
  readAt      DateTime  @default(now())
  // Added metrics similar to ArticleRead for unified simple tracking
  totalTimeMs      Int      @default(0)
  maxScrollPercent Float    @default(0)
  completed        Boolean  @default(false)
  lastEventAt      DateTime?
  completedAt      DateTime?
  sessionsCount    Int      @default(0)

  @@unique([userId, shortNewsId])
}

/// Unified content read tracking (dual-write while ArticleRead / ShortNewsRead still exist).
enum ContentType {
  ARTICLE
  SHORTNEWS
}

/// Reaction value for unified content reactions
enum ReactionValue {
  LIKE
  DISLIKE
}

model ContentRead {
  id              String       @id @default(cuid())
  user            User         @relation(fields: [userId], references: [id])
  userId          String
  contentId       String       // references Article.id or ShortNews.id depending on contentType
  contentType     ContentType
  readAt          DateTime     @default(now())
  totalTimeMs     Int          @default(0)
  maxScrollPercent Float       @default(0)
  completed       Boolean      @default(false)
  lastEventAt     DateTime?
  completedAt     DateTime?
  sessionsCount   Int          @default(0)
  // Snapshot location & geo context at FIRST record creation
  latitude        Float?
  longitude       Float?
  accuracyMeters  Float?
  placeId         String?
  placeName       String?
  address         String?
  stateId         String?
  districtId      String?
  mandalId        String?
  state           State?       @relation("ContentRead_state", fields: [stateId], references: [id])
  district        District?    @relation("ContentRead_district", fields: [districtId], references: [id])
  mandal          Mandal?      @relation("ContentRead_mandal", fields: [mandalId], references: [id])
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  @@unique([userId, contentType, contentId])
  @@index([contentType, contentId])
  @@index([stateId])
  @@index([districtId])
  @@index([mandalId])
}

/// Unified reactions across Article & ShortNews. Replaces legacy Like/Dislike tables going forward.
model ContentReaction {
  id          String        @id @default(cuid())
  user        User          @relation(fields: [userId], references: [id])
  userId      String
  contentId   String        // references Article.id or ShortNews.id depending on contentType (no FK for polymorphism)
  contentType ContentType
  reaction    ReactionValue
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@unique([userId, contentType, contentId])
  @@index([contentType, contentId])
  @@index([userId])
}

model Comment {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  article     Article?   @relation(fields: [articleId], references: [id])
  articleId   String?
  shortNews   ShortNews? @relation(fields: [shortNewsId], references: [id])
  shortNewsId String?
  content     String
  parent      Comment?   @relation("Replies", fields: [parentId], references: [id])
  parentId    String?
  replies     Comment[]  @relation("Replies")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([articleId])
  @@index([shortNewsId])
  @@index([parentId])
}

model Media {
  id          String   @id @default(cuid())
  key         String   @unique
  url         String
  name        String
  contentType String
  size        Int
  kind        String   // image | video | other
  folder      String?
  owner       User?    @relation(fields: [ownerId], references: [id])
  ownerId     String?
  profilePhotos UserProfile[] @relation("UserProfile_profilePhotoMedia")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// User profile details separated from the core User
model UserProfile {
  id                    String   @id @default(cuid())
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String   @unique
  fullName              String?
  gender                String?
  dob                   DateTime?
  maritalStatus         String?
  bio                   String?
  profilePhotoUrl       String?
  profilePhotoMedia     Media?   @relation("UserProfile_profilePhotoMedia", fields: [profilePhotoMediaId], references: [id])
  profilePhotoMediaId   String?
  emergencyContactNumber String?
  address               Json?
  state                 State?   @relation("UserProfile_state", fields: [stateId], references: [id])
  stateId               String?
  district              District? @relation("UserProfile_district", fields: [districtId], references: [id])
  districtId            String?
  mandal                Mandal?  @relation("UserProfile_mandal", fields: [mandalId], references: [id])
  mandalId              String?
  assemblyId            String?
  villageId             String?
  occupation            String?
  education             String?
  socialLinks           Json?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

/// One-line options/opinions posted by a user for a ShortNews.
/// - At most one option per (user, shortNews)
/// - content is limited to 50 characters
model ShortNewsOption {
  id          String     @id @default(cuid())
  shortNews   ShortNews  @relation(fields: [shortNewsId], references: [id])
  shortNewsId String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  content     String     @db.VarChar(50)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([userId, shortNewsId])
  @@index([shortNewsId])
  @@index([userId])
}
